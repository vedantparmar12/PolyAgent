version: '3.8'

services:
  # Main API service
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: enhanced-agentic-api
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --workers 4
    ports:
      - "8000:8000"
    environment:
      - LOG_LEVEL=INFO
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=${DATABASE_URL:-postgresql://agent:agent@postgres:5432/agentic}
    volumes:
      - ../config:/app/config
      - ../data:/app/data
      - ../logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - agent-network

  # Streamlit UI
  streamlit:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: enhanced-agentic-ui
    command: streamlit run src/ui/streamlit_dashboard.py --server.port 8501 --server.address 0.0.0.0
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://api:8000
      - STREAMLIT_THEME_PRIMARY_COLOR="#1E88E5"
      - STREAMLIT_THEME_BACKGROUND_COLOR="#FFFFFF"
    volumes:
      - ../config:/app/config
      - ../data:/app/data
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - agent-network

  # MCP Server
  mcp-server:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: enhanced-agentic-mcp
    command: python -m src.mcp.server --host 0.0.0.0 --port 8765
    ports:
      - "8765:8765"
    environment:
      - MCP_AUTH_METHOD=${MCP_AUTH_METHOD:-api_key}
      - MCP_API_KEY=${MCP_API_KEY}
      - API_URL=http://api:8000
    volumes:
      - ../config/mcp:/app/config/mcp
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - agent-network

  # Background worker for async tasks
  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: enhanced-agentic-worker
    command: celery -A src.workers.celery_app worker --loglevel=info --concurrency=4
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    volumes:
      - ../config:/app/config
      - ../data:/app/data
    depends_on:
      - redis
      - api
    restart: unless-stopped
    networks:
      - agent-network

  # Celery Beat for scheduled tasks
  beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: enhanced-agentic-beat
    command: celery -A src.workers.celery_app beat --loglevel=info
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ../config:/app/config
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - agent-network

  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    container_name: enhanced-agentic-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - agent-network

  # PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: enhanced-agentic-postgres
    environment:
      - POSTGRES_USER=agent
      - POSTGRES_PASSWORD=agent
      - POSTGRES_DB=agentic
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - agent-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: enhanced-agentic-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../static:/usr/share/nginx/html/static:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - streamlit
      - mcp-server
    restart: unless-stopped
    networks:
      - agent-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: enhanced-agentic-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - agent-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: enhanced-agentic-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - agent-network

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  nginx_logs:

networks:
  agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16